"""Unit test for test.py"""
from listings import *
import unittest
import numpy

class KnownValues(unittest.TestCase):
    knownValue = [[10, 5, 1, 0.5, 0.5,
                   numpy.array(
        [[ 1.,   1.,   1.,   0.,   0. ],
         [ 1.,   1.,   1.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ]]
        ),
                   numpy.array(
        [[ 0.,   0.5,  0.5,  0.5,  0. ],
         [ 0.5,  1.,   1.,   0.5,  0. ],
         [ 0.5,  0.5,  0.5,  0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ]]
        )],
                  [10, 5, 6, 0., 1.,
                   numpy.array(
        [[ 1.,   1.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ]]
        ),
                   numpy.array(
        [[ 0.,   1.,   1.,   0.,   0. ],
         [ 0.,   1.,   1.,   0.,   0. ],
         [ 0.,   1.,   1.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ]]
        )],
                  [10, 5, 1, 0., -1.,
                   numpy.array(
        [[ 1.,   1.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ]]
        ),
                   numpy.array(
        [[ 1.,   0.,   0.,   0.,   1. ],
         [ 1.,   0.,   0.,   0.,   1. ],
         [ 1.,   0.,   0.,   0.,   1. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ]]
        )],
                  [10, 5, 2, -1., 0.,
                   numpy.array(
        [[ 1.,   1.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ]]
        ),
                   numpy.array(
        [[ 1.,   1.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 0.,   0.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ],
         [ 1.,   1.,   0.,   0.,   0. ]]
        )]       
                  ]

    def testMpdata(self):
        for nx, ny, nt, cx, cy, psi_in, psi_out in self.knownValue:
             slv = Solver_2D(Mpdata(1), Cyclic, Cyclic, nx, ny)
             slv.state()[:] = psi_in
             slv.Cx()[:] = cx
             slv.Cy()[:] = cy
             slv.solve(nt)
             print "cx, cy, nt", cx, cy, nt
             self.assertTrue((slv.state() == psi_out).all())

if __name__ == "__main__":
     unittest.main()
